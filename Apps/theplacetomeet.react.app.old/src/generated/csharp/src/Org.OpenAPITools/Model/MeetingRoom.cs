/*
 * ThePlaceToMeet.WebApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MeetingRoom
    /// </summary>
    [DataContract]
    public partial class MeetingRoom :  IEquatable<MeetingRoom>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets VergaderruimteType
        /// </summary>
        [DataMember(Name="vergaderruimteType", EmitDefaultValue=false)]
        public MeetingRoomType? VergaderruimteType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MeetingRoom" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="naam">naam.</param>
        /// <param name="vergaderruimteType">vergaderruimteType.</param>
        /// <param name="maximumAantalPersonen">maximumAantalPersonen.</param>
        /// <param name="prijsPerUur">prijsPerUur.</param>
        /// <param name="prijsPerPersoonStandaardCatering">prijsPerPersoonStandaardCatering.</param>
        public MeetingRoom(int id = default(int), string naam = default(string), MeetingRoomType? vergaderruimteType = default(MeetingRoomType?), int maximumAantalPersonen = default(int), double prijsPerUur = default(double), double prijsPerPersoonStandaardCatering = default(double))
        {
            this.Naam = naam;
            this.Id = id;
            this.Naam = naam;
            this.VergaderruimteType = vergaderruimteType;
            this.MaximumAantalPersonen = maximumAantalPersonen;
            this.PrijsPerUur = prijsPerUur;
            this.PrijsPerPersoonStandaardCatering = prijsPerPersoonStandaardCatering;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Naam
        /// </summary>
        [DataMember(Name="naam", EmitDefaultValue=true)]
        public string Naam { get; set; }


        /// <summary>
        /// Gets or Sets MaximumAantalPersonen
        /// </summary>
        [DataMember(Name="maximumAantalPersonen", EmitDefaultValue=false)]
        public int MaximumAantalPersonen { get; set; }

        /// <summary>
        /// Gets or Sets PrijsPerUur
        /// </summary>
        [DataMember(Name="prijsPerUur", EmitDefaultValue=false)]
        public double PrijsPerUur { get; set; }

        /// <summary>
        /// Gets or Sets PrijsPerPersoonStandaardCatering
        /// </summary>
        [DataMember(Name="prijsPerPersoonStandaardCatering", EmitDefaultValue=false)]
        public double PrijsPerPersoonStandaardCatering { get; set; }

        /// <summary>
        /// Gets or Sets Reservaties
        /// </summary>
        [DataMember(Name="reservaties", EmitDefaultValue=true)]
        public List<Reservation> Reservaties { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MeetingRoom {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Naam: ").Append(Naam).Append("\n");
            sb.Append("  VergaderruimteType: ").Append(VergaderruimteType).Append("\n");
            sb.Append("  MaximumAantalPersonen: ").Append(MaximumAantalPersonen).Append("\n");
            sb.Append("  PrijsPerUur: ").Append(PrijsPerUur).Append("\n");
            sb.Append("  PrijsPerPersoonStandaardCatering: ").Append(PrijsPerPersoonStandaardCatering).Append("\n");
            sb.Append("  Reservaties: ").Append(Reservaties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MeetingRoom);
        }

        /// <summary>
        /// Returns true if MeetingRoom instances are equal
        /// </summary>
        /// <param name="input">Instance of MeetingRoom to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeetingRoom input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Naam == input.Naam ||
                    (this.Naam != null &&
                    this.Naam.Equals(input.Naam))
                ) && 
                (
                    this.VergaderruimteType == input.VergaderruimteType ||
                    (this.VergaderruimteType != null &&
                    this.VergaderruimteType.Equals(input.VergaderruimteType))
                ) && 
                (
                    this.MaximumAantalPersonen == input.MaximumAantalPersonen ||
                    (this.MaximumAantalPersonen != null &&
                    this.MaximumAantalPersonen.Equals(input.MaximumAantalPersonen))
                ) && 
                (
                    this.PrijsPerUur == input.PrijsPerUur ||
                    (this.PrijsPerUur != null &&
                    this.PrijsPerUur.Equals(input.PrijsPerUur))
                ) && 
                (
                    this.PrijsPerPersoonStandaardCatering == input.PrijsPerPersoonStandaardCatering ||
                    (this.PrijsPerPersoonStandaardCatering != null &&
                    this.PrijsPerPersoonStandaardCatering.Equals(input.PrijsPerPersoonStandaardCatering))
                ) && 
                (
                    this.Reservaties == input.Reservaties ||
                    this.Reservaties != null &&
                    input.Reservaties != null &&
                    this.Reservaties.SequenceEqual(input.Reservaties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Naam != null)
                    hashCode = hashCode * 59 + this.Naam.GetHashCode();
                if (this.VergaderruimteType != null)
                    hashCode = hashCode * 59 + this.VergaderruimteType.GetHashCode();
                if (this.MaximumAantalPersonen != null)
                    hashCode = hashCode * 59 + this.MaximumAantalPersonen.GetHashCode();
                if (this.PrijsPerUur != null)
                    hashCode = hashCode * 59 + this.PrijsPerUur.GetHashCode();
                if (this.PrijsPerPersoonStandaardCatering != null)
                    hashCode = hashCode * 59 + this.PrijsPerPersoonStandaardCatering.GetHashCode();
                if (this.Reservaties != null)
                    hashCode = hashCode * 59 + this.Reservaties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
