/*
 * ThePlaceToMeet.WebApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Catering
    /// </summary>
    [DataContract]
    public partial class Catering :  IEquatable<Catering>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Catering" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="titel">titel.</param>
        /// <param name="beschrijving">beschrijving.</param>
        /// <param name="prijsPerPersoon">prijsPerPersoon.</param>
        public Catering(int id = default(int), string titel = default(string), string beschrijving = default(string), double prijsPerPersoon = default(double))
        {
            this.Titel = titel;
            this.Beschrijving = beschrijving;
            this.Id = id;
            this.Titel = titel;
            this.Beschrijving = beschrijving;
            this.PrijsPerPersoon = prijsPerPersoon;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Titel
        /// </summary>
        [DataMember(Name="titel", EmitDefaultValue=true)]
        public string Titel { get; set; }

        /// <summary>
        /// Gets or Sets Beschrijving
        /// </summary>
        [DataMember(Name="beschrijving", EmitDefaultValue=true)]
        public string Beschrijving { get; set; }

        /// <summary>
        /// Gets or Sets PrijsPerPersoon
        /// </summary>
        [DataMember(Name="prijsPerPersoon", EmitDefaultValue=false)]
        public double PrijsPerPersoon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Catering {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Titel: ").Append(Titel).Append("\n");
            sb.Append("  Beschrijving: ").Append(Beschrijving).Append("\n");
            sb.Append("  PrijsPerPersoon: ").Append(PrijsPerPersoon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Catering);
        }

        /// <summary>
        /// Returns true if Catering instances are equal
        /// </summary>
        /// <param name="input">Instance of Catering to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Catering input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Titel == input.Titel ||
                    (this.Titel != null &&
                    this.Titel.Equals(input.Titel))
                ) && 
                (
                    this.Beschrijving == input.Beschrijving ||
                    (this.Beschrijving != null &&
                    this.Beschrijving.Equals(input.Beschrijving))
                ) && 
                (
                    this.PrijsPerPersoon == input.PrijsPerPersoon ||
                    (this.PrijsPerPersoon != null &&
                    this.PrijsPerPersoon.Equals(input.PrijsPerPersoon))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Titel != null)
                    hashCode = hashCode * 59 + this.Titel.GetHashCode();
                if (this.Beschrijving != null)
                    hashCode = hashCode * 59 + this.Beschrijving.GetHashCode();
                if (this.PrijsPerPersoon != null)
                    hashCode = hashCode * 59 + this.PrijsPerPersoon.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
