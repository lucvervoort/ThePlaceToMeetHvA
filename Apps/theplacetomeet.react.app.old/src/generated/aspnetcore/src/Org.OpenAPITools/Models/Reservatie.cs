/*
 * ThePlaceToMeet.WebApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Reservatie : IEquatable<Reservatie>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets AantalPersonen
        /// </summary>
        [DataMember(Name="aantalPersonen", EmitDefaultValue=true)]
        public int AantalPersonen { get; set; }

        /// <summary>
        /// Gets or Sets Dag
        /// </summary>
        [DataMember(Name="dag", EmitDefaultValue=false)]
        public DateTime Dag { get; set; }

        /// <summary>
        /// Gets or Sets BeginUur
        /// </summary>
        [DataMember(Name="beginUur", EmitDefaultValue=true)]
        public int BeginUur { get; set; }

        /// <summary>
        /// Gets or Sets DuurInUren
        /// </summary>
        [DataMember(Name="duurInUren", EmitDefaultValue=true)]
        public int DuurInUren { get; set; }

        /// <summary>
        /// Gets or Sets Tot
        /// </summary>
        [DataMember(Name="tot", EmitDefaultValue=true)]
        public int Tot { get; set; }

        /// <summary>
        /// Gets or Sets PrijsPerUur
        /// </summary>
        [DataMember(Name="prijsPerUur", EmitDefaultValue=true)]
        public double PrijsPerUur { get; set; }

        /// <summary>
        /// Gets or Sets PrijsPerPersoonStandaardCatering
        /// </summary>
        [DataMember(Name="prijsPerPersoonStandaardCatering", EmitDefaultValue=true)]
        public double PrijsPerPersoonStandaardCatering { get; set; }

        /// <summary>
        /// Gets or Sets PrijsPerPersoonCatering
        /// </summary>
        [DataMember(Name="prijsPerPersoonCatering", EmitDefaultValue=true)]
        public double PrijsPerPersoonCatering { get; set; }

        /// <summary>
        /// Gets or Sets Catering
        /// </summary>
        [DataMember(Name="catering", EmitDefaultValue=false)]
        public Catering Catering { get; set; }

        /// <summary>
        /// Gets or Sets Korting
        /// </summary>
        [DataMember(Name="korting", EmitDefaultValue=false)]
        public Korting Korting { get; set; }

        /// <summary>
        /// Gets or Sets Vergaderruimte
        /// </summary>
        [DataMember(Name="vergaderruimte", EmitDefaultValue=false)]
        public Vergaderruimte Vergaderruimte { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Reservatie {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AantalPersonen: ").Append(AantalPersonen).Append("\n");
            sb.Append("  Dag: ").Append(Dag).Append("\n");
            sb.Append("  BeginUur: ").Append(BeginUur).Append("\n");
            sb.Append("  DuurInUren: ").Append(DuurInUren).Append("\n");
            sb.Append("  Tot: ").Append(Tot).Append("\n");
            sb.Append("  PrijsPerUur: ").Append(PrijsPerUur).Append("\n");
            sb.Append("  PrijsPerPersoonStandaardCatering: ").Append(PrijsPerPersoonStandaardCatering).Append("\n");
            sb.Append("  PrijsPerPersoonCatering: ").Append(PrijsPerPersoonCatering).Append("\n");
            sb.Append("  Catering: ").Append(Catering).Append("\n");
            sb.Append("  Korting: ").Append(Korting).Append("\n");
            sb.Append("  Vergaderruimte: ").Append(Vergaderruimte).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Reservatie)obj);
        }

        /// <summary>
        /// Returns true if Reservatie instances are equal
        /// </summary>
        /// <param name="other">Instance of Reservatie to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Reservatie other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    AantalPersonen == other.AantalPersonen ||
                    
                    AantalPersonen.Equals(other.AantalPersonen)
                ) && 
                (
                    Dag == other.Dag ||
                    Dag != null &&
                    Dag.Equals(other.Dag)
                ) && 
                (
                    BeginUur == other.BeginUur ||
                    
                    BeginUur.Equals(other.BeginUur)
                ) && 
                (
                    DuurInUren == other.DuurInUren ||
                    
                    DuurInUren.Equals(other.DuurInUren)
                ) && 
                (
                    Tot == other.Tot ||
                    
                    Tot.Equals(other.Tot)
                ) && 
                (
                    PrijsPerUur == other.PrijsPerUur ||
                    
                    PrijsPerUur.Equals(other.PrijsPerUur)
                ) && 
                (
                    PrijsPerPersoonStandaardCatering == other.PrijsPerPersoonStandaardCatering ||
                    
                    PrijsPerPersoonStandaardCatering.Equals(other.PrijsPerPersoonStandaardCatering)
                ) && 
                (
                    PrijsPerPersoonCatering == other.PrijsPerPersoonCatering ||
                    
                    PrijsPerPersoonCatering.Equals(other.PrijsPerPersoonCatering)
                ) && 
                (
                    Catering == other.Catering ||
                    Catering != null &&
                    Catering.Equals(other.Catering)
                ) && 
                (
                    Korting == other.Korting ||
                    Korting != null &&
                    Korting.Equals(other.Korting)
                ) && 
                (
                    Vergaderruimte == other.Vergaderruimte ||
                    Vergaderruimte != null &&
                    Vergaderruimte.Equals(other.Vergaderruimte)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + AantalPersonen.GetHashCode();
                    if (Dag != null)
                    hashCode = hashCode * 59 + Dag.GetHashCode();
                    
                    hashCode = hashCode * 59 + BeginUur.GetHashCode();
                    
                    hashCode = hashCode * 59 + DuurInUren.GetHashCode();
                    
                    hashCode = hashCode * 59 + Tot.GetHashCode();
                    
                    hashCode = hashCode * 59 + PrijsPerUur.GetHashCode();
                    
                    hashCode = hashCode * 59 + PrijsPerPersoonStandaardCatering.GetHashCode();
                    
                    hashCode = hashCode * 59 + PrijsPerPersoonCatering.GetHashCode();
                    if (Catering != null)
                    hashCode = hashCode * 59 + Catering.GetHashCode();
                    if (Korting != null)
                    hashCode = hashCode * 59 + Korting.GetHashCode();
                    if (Vergaderruimte != null)
                    hashCode = hashCode * 59 + Vergaderruimte.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Reservatie left, Reservatie right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Reservatie left, Reservatie right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
