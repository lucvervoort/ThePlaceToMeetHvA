/*
 * ThePlaceToMeet.WebApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class MeetingRoomApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/MeetingRoom/{id}")]
        [ValidateModelState]
        [SwaggerOperation("MeetingRoomGetById")]
        [SwaggerResponse(statusCode: 200, type: typeof(MeetingRoom), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Not Found")]
        public virtual IActionResult MeetingRoomGetById([FromRoute (Name = "id")][Required]int id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MeetingRoom));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            exampleJson = "{\n  \"prijsPerUur\" : 1.4894159098541704,\n  \"id\" : 1,\n  \"prijsPerPersoonStandaardCatering\" : 6.84685269835264,\n  \"naam\" : \"naam\",\n  \"maximumAantalPersonen\" : 1,\n  \"reservaties\" : [ null, null ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MeetingRoom>(exampleJson)
            : default(MeetingRoom);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="maxAantalPersonen"></param>
        /// <param name="maaxNumberOfPersons"></param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/MeetingRoom/max/{maxAantalPersonen}")]
        [ValidateModelState]
        [SwaggerOperation("MeetingRoomGetByMaxAantalPersonen")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<MeetingRoom>), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Not Found")]
        public virtual IActionResult MeetingRoomGetByMaxAantalPersonen([FromRoute (Name = "maxAantalPersonen")][Required]string maxAantalPersonen, [FromQuery (Name = "maaxNumberOfPersons")]int? maaxNumberOfPersons)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<MeetingRoom>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            exampleJson = "[ {\n  \"prijsPerUur\" : 1.4894159098541704,\n  \"id\" : 1,\n  \"prijsPerPersoonStandaardCatering\" : 6.84685269835264,\n  \"naam\" : \"naam\",\n  \"maximumAantalPersonen\" : 1,\n  \"reservaties\" : [ null, null ]\n}, {\n  \"prijsPerUur\" : 1.4894159098541704,\n  \"id\" : 1,\n  \"prijsPerPersoonStandaardCatering\" : 6.84685269835264,\n  \"naam\" : \"naam\",\n  \"maximumAantalPersonen\" : 1,\n  \"reservaties\" : [ null, null ]\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<MeetingRoom>>(exampleJson)
            : default(List<MeetingRoom>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/MeetingRoom")]
        [ValidateModelState]
        [SwaggerOperation("MeetingRoomMeetingRooms")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<MeetingRoom>), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Not Found")]
        public virtual IActionResult MeetingRoomMeetingRooms()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<MeetingRoom>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            exampleJson = "[ {\n  \"prijsPerUur\" : 1.4894159098541704,\n  \"id\" : 1,\n  \"prijsPerPersoonStandaardCatering\" : 6.84685269835264,\n  \"naam\" : \"naam\",\n  \"maximumAantalPersonen\" : 1,\n  \"reservaties\" : [ null, null ]\n}, {\n  \"prijsPerUur\" : 1.4894159098541704,\n  \"id\" : 1,\n  \"prijsPerPersoonStandaardCatering\" : 6.84685269835264,\n  \"naam\" : \"naam\",\n  \"maximumAantalPersonen\" : 1,\n  \"reservaties\" : [ null, null ]\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<MeetingRoom>>(exampleJson)
            : default(List<MeetingRoom>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
