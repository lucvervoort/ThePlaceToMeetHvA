/*
 * ThePlaceToMeet.WebApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Korting
    /// </summary>
    [DataContract]
    public partial class Korting :  IEquatable<Korting>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Korting" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="percentage">percentage.</param>
        /// <param name="minimumAantalReservatiesInJaar">minimumAantalReservatiesInJaar.</param>
        public Korting(int id = default(int), int percentage = default(int), int minimumAantalReservatiesInJaar = default(int))
        {
            this.Id = id;
            this.Percentage = percentage;
            this.MinimumAantalReservatiesInJaar = minimumAantalReservatiesInJaar;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Percentage
        /// </summary>
        [DataMember(Name="percentage", EmitDefaultValue=false)]
        public int Percentage { get; set; }

        /// <summary>
        /// Gets or Sets MinimumAantalReservatiesInJaar
        /// </summary>
        [DataMember(Name="minimumAantalReservatiesInJaar", EmitDefaultValue=false)]
        public int MinimumAantalReservatiesInJaar { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Korting {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("  MinimumAantalReservatiesInJaar: ").Append(MinimumAantalReservatiesInJaar).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Korting);
        }

        /// <summary>
        /// Returns true if Korting instances are equal
        /// </summary>
        /// <param name="input">Instance of Korting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Korting input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Percentage == input.Percentage ||
                    (this.Percentage != null &&
                    this.Percentage.Equals(input.Percentage))
                ) && 
                (
                    this.MinimumAantalReservatiesInJaar == input.MinimumAantalReservatiesInJaar ||
                    (this.MinimumAantalReservatiesInJaar != null &&
                    this.MinimumAantalReservatiesInJaar.Equals(input.MinimumAantalReservatiesInJaar))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Percentage != null)
                    hashCode = hashCode * 59 + this.Percentage.GetHashCode();
                if (this.MinimumAantalReservatiesInJaar != null)
                    hashCode = hashCode * 59 + this.MinimumAantalReservatiesInJaar.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
